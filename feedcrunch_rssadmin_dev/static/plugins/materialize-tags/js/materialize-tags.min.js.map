{"version":3,"sources":["materialize-tags.js"],"names":["$","tagClass","item","itemValue","toString","itemText","this","itemTitle","onTagExists","$tag","hide","fadeIn","TagsMaterialize","element","options","itemsArray","$element","objectItems","placeholderText","hasAttribute","attr","inputSize","Math","max","length","$container","$input","appendTo","$label","parent","find","before","build","on","addClass","next","focus","label","parents","hasClass","parentContainer","tags","removeClass","makeOptionItemFunction","key","propertyName","makeOptionFunction","value","htmlEncode","htmlEncodeContainer","text","html","doGetCaretPosition","oField","iCaretPos","document","selection","oSel","createRange","moveStart","selectionStart","keyCombinationInList","keyDownEvent","lookupList","found","each","index","keyCombination","which","alt","hasOwnProperty","altKey","shift","shiftKey","ctrl","ctrlKey","defaultOptions","freeInput","addOnBlur","maxTags","undefined","maxChars","confirmKeys","trimValue","allowDuplicates","prototype","constructor","add","dontPushVal","self","trim","match","tagName","items","split","i","pushVal","existing","grep","maxInputLength","beforeItemAddEvent","Event","cancel","trigger","push","data","findInputWrapper","after","$existingTag","filter","remove","other","beforeItemRemoveEvent","inArray","splice","removeAll","pop","refresh","contents","nodeType","nodeValue","val","map","extend","typeaheadjs","typeaheadConfig","typeaheadDatasets","isArray","typeahead","proxy","obj","datum","valueKey","event","removeAttr","target","$inputWrapper","prev","$prevTag","$nextTag","textLength","ceil","maxLengthReached","substr","preventDefault","closest","destroy","off","removeData","show","input","elt","container","parentNode","fn","materialtags","arg1","arg2","arg3","results","retVal","Constructor","window","jQuery"],"mappings":"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","file":"materialize-tags.min.js","sourcesContent":["(function ($)\n{\n    \"use strict\";\n\n    /**\n     * Default Configuration\n     *\n     * @type {{tagClass: tagClass, itemValue: itemValue, itemText: itemText, itemTitle: itemTitle, freeInput: boolean, addOnBlur: boolean, maxTags: undefined, maxChars: undefined, confirmKeys: number[], onTagExists: onTagExists, trimValue: boolean, allowDuplicates: boolean}}\n     */\n    var defaultOptions = {\n        tagClass        : tagClass,\n        itemValue       : itemValue,\n        itemText        : itemText,\n        itemTitle       : itemTitle,\n        freeInput       : true,\n        addOnBlur       : true,\n        maxTags         : undefined,\n        maxChars        : undefined,\n        confirmKeys     : [9,13, 44],\n        onTagExists     : onTagExists,\n        trimValue       : true,\n        allowDuplicates : false\n    };\n\n    function tagClass(item)\n    {\n        return 'chip';\n    }\n\n    function itemValue(item)\n    {\n        return item ? item.toString() : item;\n    }\n\n    function itemText(item)\n    {\n        return this.itemValue(item);\n    }\n\n    function itemTitle(item)\n    {\n        return null;\n    }\n\n    function onTagExists(item, $tag)\n    {\n        $tag.hide().fadeIn();\n    }\n\n    /**\n     * Constructor function\n     *\n     * @param element\n     * @param options\n     * @constructor\n     */\n    function TagsMaterialize(element, options)\n    {\n        this.itemsArray = [];\n\n        this.$element = $(element);\n        this.$element.hide();\n\n        this.objectItems     = options && options.itemValue;\n        this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\n        this.inputSize       = Math.max(1, this.placeholderText.length);\n\n        this.$container = $('<div class=\"materialize-tags\"></div>');\n        this.$input     = $('<input type=\"text\" class=\"n-tag\"  placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\n        this.$label     = this.$element.parent().find('label');\n\n        this.$element.before(this.$container);\n        this.build(options);\n\n        this.$label.on('click', function ()\n        {\n            $(this).addClass('active');\n            $(this).next('.materialize-tags').find('input.n-tag').focus();\n        });\n\n        this.$input.on('focus', function ()\n        {\n            var label = $(this).parents('.materialize-tags').parent().find('label');\n            $(this).parents('.materialize-tags').addClass('active');\n\n            if (!label.hasClass('active'))\n            {\n                label.addClass('active');\n            }\n        }).on('focusout', function ()\n        {\n            var parentContainer = $(this).parents('.materialize-tags'),\n                tags            = parentContainer.find('span.chip');\n            parentContainer.removeClass('active');\n            // Verify if is empty and remove \"active\" class from label\n            if (tags.length == 0)\n            {\n                parentContainer.parent().find('label').removeClass('active');\n            }\n        });\n    }\n\n    TagsMaterialize.prototype = {\n        constructor : TagsMaterialize,\n\n        /**\n         * Adds the given item as a new tag. Pass true to dontPushVal to prevent\n         * updating the elements val()\n         *\n         * @param item\n         * @param dontPushVal\n         * @param options\n         */\n        add : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)\n            {\n                return;\n            }\n\n            // Ignore false values, except false\n            if (item !== false && !item)\n            {\n                return;\n            }\n\n            // Trim value\n            if (typeof item === \"string\" && self.options.trimValue)\n            {\n                item = $.trim(item);\n            }\n\n            // Throw an error when trying to add an object while the itemValue option was not set\n            if (typeof item === \"object\" && !self.objectItems)\n            {\n                throw(\"Can't add objects when itemValue option is not set\");\n            }\n\n            // Ignore strings only contain whitespace\n            if (item.toString().match(/^\\s*$/))\n            {\n                return;\n            }\n\n            if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT')\n            {\n                var items = item.split(',');\n                if (items.length > 1)\n                {\n                    for (var i = 0; i < items.length; i++)\n                    {\n                        this.add(items[i], true);\n                    }\n\n                    if (!dontPushVal)\n                    {\n                        self.pushVal();\n                    }\n                    return;\n                }\n            }\n\n            var itemValue = self.options.itemValue(item),\n                itemText  = self.options.itemText(item),\n                tagClass  = self.options.tagClass(item),\n                itemTitle = self.options.itemTitle(item);\n\n            // Ignore items all ready added\n            var existing = $.grep(self.itemsArray, function (item) { return self.options.itemValue(item) === itemValue; })[0];\n            if (existing && !self.options.allowDuplicates)\n            {\n                // Invoke onTagExists\n                if (self.options.onTagExists)\n                {\n                    var $existingTag = $(\".tag\", self.$container).filter(function () { return $(this).data(\"item\") === existing; });\n                    self.options.onTagExists(item, $existingTag);\n                }\n                return;\n            }\n\n            // if length greater than limit\n            if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)\n            {\n                return;\n            }\n\n            // raise beforeItemAdd arg\n            var beforeItemAddEvent = $.Event('beforeItemAdd', {item : item, cancel : false, options : options});\n            self.$element.trigger(beforeItemAddEvent);\n            if (beforeItemAddEvent.cancel)\n            {\n                return;\n            }\n\n            // register item in internal array and map\n            self.itemsArray.push(item);\n\n            // add a tag element\n            var $tag = $('<span class=\"' + htmlEncode(tagClass) + (itemTitle !== null ? ('\" title=\"' + itemTitle) : '') + '\">' + htmlEncode(itemText) + '<i class=\"material-icons\" data-role=\"remove\">close</i></span>');\n            $tag.data('item', item);\n            self.findInputWrapper().before($tag);\n            $tag.after(' ');\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Add class when reached maxTags\n            if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)\n            {\n                self.$container.addClass('materialize-tags-max');\n            }\n\n            self.$element.trigger($.Event('itemAdded', {item : item, options : options}));\n        },\n\n        /**\n         * Removes the given item. Pass true to dontPushVal to prevent updating the\n         * elements val()\n         *\n         * @param item\n         * @param dontPushVal\n         * @param options\n         */\n        remove : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.objectItems)\n            {\n                if (typeof item === \"object\")\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == self.options.itemValue(item); });\n                }\n                else\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == item; });\n                }\n\n                item = item[item.length - 1];\n            }\n\n            if (item)\n            {\n                var beforeItemRemoveEvent = $.Event('beforeItemRemove', {\n                    item    : item,\n                    cancel  : false,\n                    options : options\n                });\n                self.$element.trigger(beforeItemRemoveEvent);\n                if (beforeItemRemoveEvent.cancel)\n                {\n                    return;\n                }\n\n                $('.chip', self.$container).filter(function () { return $(this).data('item') === item; }).remove();\n\n                if ($.inArray(item, self.itemsArray) !== -1)\n                {\n                    self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\n                }\n            }\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Remove class when reached maxTags\n            if (self.options.maxTags > self.itemsArray.length)\n            {\n                self.$container.removeClass('materialize-tags-max');\n            }\n\n            self.$element.trigger($.Event('itemRemoved', {item : item, options : options}));\n        },\n\n        /**\n         * Removes all items\n         */\n        removeAll : function ()\n        {\n            var self = this;\n\n            $('.chip', self.$container).remove();\n\n            while (self.itemsArray.length > 0)\n            {\n                self.itemsArray.pop();\n            }\n\n            self.pushVal();\n        },\n\n        /**\n         * Refreshes the tags so they match the text/value of their corresponding\n         * item.\n         */\n        refresh : function ()\n        {\n            var self = this;\n            $('.chip', self.$container).each(function ()\n            {\n                var $tag        = $(this),\n                    item        = $tag.data('item'),\n                    itemValue   = self.options.itemValue(item),\n                    itemText    = self.options.itemText(item),\n                    tagClass    = self.options.tagClass(item);\n\n                // Update tag's class and inner text\n                $tag.attr('class', null);\n                $tag.addClass('tag ' + htmlEncode(tagClass));\n                $tag.contents().filter(function ()\n                {\n                    return this.nodeType == 3;\n                })[0].nodeValue = htmlEncode(itemText);\n\n            });\n        },\n\n        /**\n         * Returns the items added as tags\n         */\n        items : function ()\n        {\n            return this.itemsArray;\n        },\n\n        /**\n         * Assembly value by retrieving the value of each item, and set it on the\n         * element.\n         */\n        pushVal : function ()\n        {\n            var self = this,\n                val  = $.map(self.items(), function (item)\n                {\n                    return self.options.itemValue(item).toString();\n                });\n\n            self.$element.val(val, true).trigger('change');\n        },\n\n        /**\n         * Initializes the tags input behaviour on the element\n         *\n         * @param options\n         */\n        build : function (options)\n        {\n            var self = this;\n\n            self.options = $.extend({}, defaultOptions, options);\n            // When itemValue is set, freeInput should always be false\n            if (self.objectItems)\n            {\n                self.options.freeInput = false;\n            }\n\n            makeOptionItemFunction(self.options, 'itemValue');\n            makeOptionItemFunction(self.options, 'itemText');\n            makeOptionFunction(self.options, 'tagClass');\n\n            // Typeahead.js\n            if (self.options.typeaheadjs)\n            {\n                var typeaheadConfig   = null;\n                var typeaheadDatasets = {};\n\n                // Determine if main configurations were passed or simply a dataset\n                var typeaheadjs = self.options.typeaheadjs;\n                if ($.isArray(typeaheadjs))\n                {\n                    typeaheadConfig   = typeaheadjs[0];\n                    typeaheadDatasets = typeaheadjs[1];\n                }\n                else\n                {\n                    typeaheadDatasets = typeaheadjs;\n                }\n\n                self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum)\n                {\n                    if (typeaheadDatasets.valueKey)\n                    {\n                        self.add(datum[typeaheadDatasets.valueKey]);\n                    }\n                    else\n                    {\n                        self.add(datum);\n                    }\n                    self.$input.typeahead('val', '');\n                }, self));\n            }\n\n            self.$container.on('click', $.proxy(function (event)\n            {\n                if (!self.$element.attr('disabled'))\n                {\n                    self.$input.removeAttr('disabled');\n                }\n                self.$input.focus();\n            }, self));\n\n            if (self.options.addOnBlur && self.options.freeInput)\n            {\n                self.$input.on('focusout', $.proxy(function (event)\n                {\n                    // HACK: only process on focusout when no typeahead opened, to\n                    //       avoid adding the typeahead text as tag\n                    if ($('.typeahead, .twitter-typeahead', self.$container).length === 0)\n                    {\n                        self.add(self.$input.val());\n                        self.$input.val('');\n                    }\n                }, self));\n            }\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input        = $(event.target),\n                    $inputWrapper = self.findInputWrapper();\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                switch (event.which)\n                {\n                    // BACKSPACE\n                    case 8:\n                        if (doGetCaretPosition($input[0]) === 0)\n                        {\n                            var prev = $inputWrapper.prev();\n                            if (prev)\n                            {\n                                self.remove(prev.data('item'));\n                            }\n                        }\n                        break;\n\n                    // DELETE\n                    case 46:\n                        if (doGetCaretPosition($input[0]) === 0)\n                        {\n                            var next = $inputWrapper.next();\n                            if (next)\n                            {\n                                self.remove(next.data('item'));\n                            }\n                        }\n                        break;\n\n                    // LEFT ARROW\n                    case 37:\n                        // Try to move the input before the previous tag\n                        var $prevTag = $inputWrapper.prev();\n                        if ($input.val().length === 0 && $prevTag[0])\n                        {\n                            $prevTag.before($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    // RIGHT ARROW\n                    case 39:\n                        // Try to move the input after the next tag\n                        var $nextTag = $inputWrapper.next();\n                        if ($input.val().length === 0 && $nextTag[0])\n                        {\n                            $nextTag.after($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    default:\n                    // ignore\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size       = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input = $(event.target);\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                var text             = $input.val(),\n                    maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\n                if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached))\n                {\n                    self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\n                    $input.val('');\n                    event.preventDefault();\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size       = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            // Remove icon clicked\n            self.$container.on('click', '[data-role=remove]', $.proxy(function (event)\n            {\n                if (self.$element.attr('disabled'))\n                {\n                    return;\n                }\n                self.remove($(event.target).closest('.chip').data('item'));\n            }, self));\n\n            // Only add existing value as tags when using strings as tags\n            if (self.options.itemValue === defaultOptions.itemValue)\n            {\n                if (self.$element[0].tagName === 'INPUT')\n                {\n                    self.add(self.$element.val());\n                }\n            }\n        },\n\n        /**\n         * Removes all materialtags behaviour and unregsiter all event handlers\n         */\n        destroy : function ()\n        {\n            var self = this;\n\n            // Unbind events\n            self.$container.off('keydown', 'input');\n            self.$container.off('click', '[role=remove]');\n\n            self.$container.remove();\n            self.$element.removeData('materialtags');\n            self.$element.show();\n        },\n\n        /**\n         * Sets focus on the materialtags\n         */\n        focus : function ()\n        {\n            this.$input.focus();\n        },\n\n        /**\n         * Returns the internal input element\n         */\n        input : function ()\n        {\n            return this.$input;\n        },\n\n        /**\n         * Returns the element which is wrapped around the internal input. This\n         * is normally the $container, but typeahead.js moves the $input element.\n         */\n        findInputWrapper : function ()\n        {\n            var elt       = this.$input[0],\n                container = this.$container[0];\n            while (elt && elt.parentNode !== container)\n            {\n                elt = elt.parentNode;\n            }\n\n            return $(elt);\n        }\n    };\n\n    /**\n     * Register JQuery plugin\n     *\n     * @param arg1\n     * @param arg2\n     * @param arg3\n     * @returns {Array}\n     */\n    $.fn.materialtags = function (arg1, arg2, arg3)\n    {\n        var results = [];\n\n        this.each(function ()\n        {\n            var materialtags = $(this).data('materialtags');\n            // Initialize a new material tags input\n            if (!materialtags)\n            {\n                materialtags = new TagsMaterialize(this, arg1);\n                $(this).data('materialtags', materialtags);\n                results.push(materialtags);\n\n                // Init tags from $(this).val()\n                $(this).val($(this).val());\n            }\n            else if (!arg1 && !arg2)\n            {\n                // materialtags already exists\n                // no function, trying to init\n                results.push(materialtags);\n            }\n            else if (materialtags[arg1] !== undefined)\n            {\n                // Invoke function on existing tags input\n                if (materialtags[arg1].length === 3 && arg3 !== undefined)\n                {\n                    var retVal = materialtags[arg1](arg2, null, arg3);\n                }\n                else\n                {\n                    var retVal = materialtags[arg1](arg2);\n                }\n                if (retVal !== undefined)\n                {\n                    results.push(retVal);\n                }\n            }\n        });\n\n        if (typeof arg1 == 'string')\n        {\n            // Return the results from the invoked function calls\n            return results.length > 1 ? results : results[0];\n        }\n        else\n        {\n            return results;\n        }\n    };\n\n    $.fn.materialtags.Constructor = TagsMaterialize;\n\n    /**\n     * Most options support both a string or number as well as a function as\n     * option value. This function makes sure that the option with the given\n     * key in the given options is wrapped in a function\n     *\n     * @param options\n     * @param key\n     */\n    function makeOptionItemFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var propertyName = options[key];\n            options[key]     = function (item) { return item[propertyName]; };\n        }\n    }\n\n    function makeOptionFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var value    = options[key];\n            options[key] = function () { return value; };\n        }\n    }\n\n    /**\n     * HtmlEncodes the given value\n     */\n    var htmlEncodeContainer = $('<div />');\n\n    function htmlEncode(value)\n    {\n        if (value)\n        {\n            return htmlEncodeContainer.text(value).html();\n        }\n        else\n        {\n            return '';\n        }\n    }\n\n    /**\n     * Returns the position of the caret in the given input field\n     * http://flightschool.acylt.com/devnotes/caret-position-woes/\n     *\n     * @param oField\n     * @returns {number}\n     */\n    function doGetCaretPosition(oField)\n    {\n        var iCaretPos = 0;\n        if (document.selection)\n        {\n            oField.focus();\n            var oSel  = document.selection.createRange();\n            oSel.moveStart('character', -oField.value.length);\n            iCaretPos = oSel.text.length;\n        }\n        else if (oField.selectionStart || oField.selectionStart == '0')\n        {\n            iCaretPos = oField.selectionStart;\n        }\n        return (iCaretPos);\n    }\n\n    /**\n     * Returns boolean indicates whether user has pressed an expected key combination.\n     * http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n     * [13, {which: 188, shiftKey: true}]\n     *\n     * @param keyDownEvent\n     * @param lookupList\n     * @returns {boolean}\n     */\n    function keyCombinationInList(keyDownEvent, lookupList)\n    {\n        var found = false;\n        $.each(lookupList, function (index, keyCombination)\n        {\n            if (typeof (keyCombination) === 'number' && keyDownEvent.which === keyCombination)\n            {\n                found = true;\n                return false;\n            }\n\n            if (keyDownEvent.which === keyCombination.which)\n            {\n                var alt   = !keyCombination.hasOwnProperty('altKey') || keyDownEvent.altKey === keyCombination.altKey,\n                    shift = !keyCombination.hasOwnProperty('shiftKey') || keyDownEvent.shiftKey === keyCombination.shiftKey,\n                    ctrl  = !keyCombination.hasOwnProperty('ctrlKey') || keyDownEvent.ctrlKey === keyCombination.ctrlKey;\n                if (alt && shift && ctrl)\n                {\n                    found = true;\n                    return false;\n                }\n            }\n        });\n\n        return found;\n    }\n\n    /**\n     * Initialize materialtags behaviour on inputs which have\n     * data-role=materialtags\n     */\n    $(function ()\n    {\n        $(\"input[data-role=materialtags]\").materialtags();\n    });\n})(window.jQuery);\n"],"sourceRoot":"/source/"}